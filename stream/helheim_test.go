// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package stream

type mockConn struct {
	sendCalled chan bool
	sendInput  struct {
		Arg0 chan TXMessage
	}
	closeCalled chan bool
	closeOutput struct {
		Ret0 chan error
	}
}

func newMockConn() *mockConn {
	m := &mockConn{}
	m.sendCalled = make(chan bool, 100)
	m.sendInput.Arg0 = make(chan TXMessage, 100)
	m.closeCalled = make(chan bool, 100)
	m.closeOutput.Ret0 = make(chan error, 100)
	return m
}
func (m *mockConn) send(arg0 TXMessage) {
	m.sendCalled <- true
	m.sendInput.Arg0 <- arg0
}
func (m *mockConn) close() error {
	m.closeCalled <- true
	return <-m.closeOutput.Ret0
}

type mockTwitchUserIDFetcher struct {
	UserIDCalled chan bool
	UserIDInput  struct {
		Username chan string
	}
	UserIDOutput struct {
		UserID chan int
		Err    chan error
	}
}

func newMockTwitchUserIDFetcher() *mockTwitchUserIDFetcher {
	m := &mockTwitchUserIDFetcher{}
	m.UserIDCalled = make(chan bool, 100)
	m.UserIDInput.Username = make(chan string, 100)
	m.UserIDOutput.UserID = make(chan int, 100)
	m.UserIDOutput.Err = make(chan error, 100)
	return m
}
func (m *mockTwitchUserIDFetcher) UserID(username string) (userID int, err error) {
	m.UserIDCalled <- true
	m.UserIDInput.Username <- username
	return <-m.UserIDOutput.UserID, <-m.UserIDOutput.Err
}
