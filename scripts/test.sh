#!/bin/bash

set -e

if [ "$1" = "ci" ]; then
    echo installing tools
    scripts/install_tools.sh
    function wait_for_postgres {
        true
    }
else
    echo starting postgres in a docker container
    PG_CONTAINER=$(docker run --rm -d -p 5432:5432 -e POSTGRES_PASSWORD=pass postgres:latest)
    export ANUBOT_TEST_POSTGRES="postgres://postgres:pass@localhost:5432/postgres?sslmode=disable"
    function teardown {
        docker kill $PG_CONTAINER
    }
    trap teardown EXIT
    function wait_for_postgres {
        until docker run --rm --link $PG_CONTAINER:pg postgres:latest pg_isready -U postgres -h pg; do
            sleep 0.1;
        done
    }

    echo "waiting for postgres to listen"
    wait_for_postgres

    echo migrating postgres database
    migrate -path=store/migrations -url="$ANUBOT_TEST_POSTGRES" up
fi

echo building binaries
scripts/build.sh

echo running tests
non_vendor_pkgs=$(go list ./... | grep -v /vendor/)
non_vendor_dirs=$(ls -d */ | grep -v vendor/)
go_lint_files=$(find . -name "*.go" | grep -v /vendor/ | xargs grep -L '// Code generated by "stringer')
go test -race $non_vendor_pkgs

echo running cleaners
goimports -w $non_vendor_dirs
gofmt -s -w $non_vendor_dirs
misspell -w $non_vendor_dirs

echo running linters
go vet $non_vendor_pkgs
deadcode $non_vendor_dirs
golint $go_lint_files
aligncheck $non_vendor_pkgs
structcheck $non_vendor_pkgs
varcheck $non_vendor_pkgs
echo $non_vendor_dirs | xargs -n 1 ineffassign
interfacer $non_vendor_pkgs
unconvert -v -apply $non_vendor_pkgs
gosimple $non_vendor_pkgs
staticcheck $non_vendor_pkgs
unused $non_vendor_pkgs
errcheck -exclude <(cat <<EOF
(*database/sql.Tx).Rollback
(*database/sql.Stmt).Close
(*database/sql.Rows).Close
EOF) $non_vendor_pkgs

echo 'All Tests Passed!'
