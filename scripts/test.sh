#!/bin/bash

set -e

if [ "$1" = "ci" ]; then
    echo installing tools
    scripts/install_tools.sh
    /etc/init.d/postgresql start
    function wait_for_postgres {
        until pg_isready -U postgres -h localhost; do
            sleep 0.1;
        done
    }
else
    echo starting postgres in a docker container
    PG_CONTAINER=$(docker run --rm -d -p 5432:5432 -e POSTGRES_PASSWORD=pass postgres:latest)
    export ANUBOT_TEST_POSTGRES="postgres://postgres:pass@localhost:5432/postgres?sslmode=disable"
    function teardown {
        docker kill $PG_CONTAINER
    }
    trap teardown EXIT
    function wait_for_postgres {
        until docker run --rm --link $PG_CONTAINER:pg postgres:latest pg_isready -U postgres -h pg; do
            sleep 0.1;
        done
    }
fi

echo building binaries
scripts/build.sh

echo "waiting for postgres to listen"
wait_for_postgres

echo migrating postgres database
migrate -path=store/migrations -url="$ANUBOT_TEST_POSTGRES" up

echo running tests
non_vendor_pkgs=$(go list ./... | grep -v /vendor/)
non_vendor_dirs=$(ls -d */ | grep -v vendor/)
go test -race $non_vendor_pkgs

echo running cleaners
goimports -w $non_vendor_dirs
gofmt -s -w $non_vendor_dirs
misspell -w $non_vendor_dirs

echo running linters
echo "  go vet"
go vet $non_vendor_pkgs
echo "  deadcode"
deadcode $non_vendor_dirs
echo "  golint"

for pkg in $non_vendor_pkgs; do
    set +e
    dir=${pkg#github.com/jasonkeene/anubot-server/}
    go_lint_files=$(ls "$dir" | grep -E "\.go$" | sed -e "s|^|$dir/|" | xargs grep -L '// Code generated by "stringer')
    set -e
    golint -set_exit_status $go_lint_files
done

echo "  aligncheck"
aligncheck $non_vendor_pkgs
echo "  structcheck"
structcheck $non_vendor_pkgs
echo "  varcheck"
varcheck $non_vendor_pkgs
echo "  ineffassign"
echo $non_vendor_dirs | xargs -n 1 ineffassign
echo "  interfacer"
interfacer $non_vendor_pkgs
echo "  unconvert"
unconvert -v -apply $non_vendor_pkgs
echo "  gosimple"
gosimple $non_vendor_pkgs
echo "  staticcheck"
staticcheck $non_vendor_pkgs
echo "  unused"
unused $non_vendor_pkgs
echo "  errcheck"
errcheck -exclude <(cat <<EOF
(*database/sql.Tx).Rollback
(*database/sql.Stmt).Close
(*database/sql.Rows).Close
EOF) $non_vendor_pkgs

echo 'All Tests Passed!'
